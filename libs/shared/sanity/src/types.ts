/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: 'span';
    _key: string;
  }>;
  style?: 'normal' | 'h2' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
  listItem?: 'bullet' | 'number';
  markDefs?: Array<{
    href?: string;
    _type: 'link';
    _key: string;
  }>;
  level?: number;
  _type: 'block';
  _key: string;
}>;

export type Tag = {
  _id: string;
  _type: 'tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
};

export type SocialNetwork = {
  _id: string;
  _type: 'socialNetwork';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  url?: string;
};

export type Resources = {
  _id: string;
  _type: 'resources';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subtitle?: string;
  categories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'category';
  }>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    name?: string;
    alt?: string;
    _type: 'sanityImage';
  };
  featured?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'resource';
  };
};

export type Resource = {
  _id: string;
  _type: 'resource';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  metaData?: MetaData;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    name?: string;
    alt?: string;
    _type: 'sanityImage';
  };
  publishedAt?: string;
  category?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'category';
  };
  slug?: Slug;
  author?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'author';
  };
  tag?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'tag';
  }>;
  relatedResource?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'resource';
  }>;
  socialNetwork?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'socialNetwork';
  }>;
  timeToRead?: number;
  preview?: string;
  content?: Array<
    | ({
        _key: string;
      } & OneColumn)
    | ({
        _key: string;
      } & TwoColumn)
  >;
};

export type Member = {
  _id: string;
  _type: 'member';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type Category = {
  _id: string;
  _type: 'category';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type Author = {
  _id: string;
  _type: 'author';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type About = {
  _id: string;
  _type: 'about';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  member?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'member';
  }>;
};

export type TwoColumn = {
  _type: 'twoColumn';
  content?: Array<
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        name?: string;
        alt?: string;
        _type: 'sanityImage';
        _key: string;
      }
    | ({
        _key: string;
      } & Quote)
  >;
};

export type RichText = {
  _type: 'richText';
  richTextContent?: BlockContent;
};

export type Quote = {
  _type: 'quote';
  author?: string;
  quoteText?: string;
};

export type OneColumn = {
  _type: 'oneColumn';
  content?: Array<
    | ({
        _key: string;
      } & Banner)
    | ({
        _key: string;
      } & RichText)
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        name?: string;
        alt?: string;
        _type: 'sanityImage';
        _key: string;
      }
  >;
};

export type MetaData = {
  _type: 'metaData';
  title?: string;
  description?: string;
};

export type Banner = {
  _type: 'banner';
  title?: string;
  bannerImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    name?: string;
    alt?: string;
    _type: 'sanityImage';
  };
  link?: Link;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type Link = {
  _type: 'link';
  href?: string;
  blank?: boolean;
};

export type SanityImage = {
  _type: 'sanityImage';
  asset?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  name?: string;
  alt?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | BlockContent
  | Tag
  | SocialNetwork
  | Resources
  | Resource
  | Member
  | Category
  | Author
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | About
  | TwoColumn
  | RichText
  | Quote
  | OneColumn
  | MetaData
  | Banner
  | Link
  | SanityImage;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../../libs/shared/sanity/src/queries.ts
// Variable: RESOURCE_QUERY
// Query: *[_type == "resource" &&   slug.current == $slug][0]{    _id,    title,    publishedAt,    slug,    category->{      title,    },    author->{      _id,      name,      image {        asset      }    },    mainImage{     alt,     name,     asset    },    socialNetwork[] ->{      _id,      url,      image    },    "slug": slug.current,    preview,    content[]{      _type,      _key,      _type == "oneColumn" => {        content[]{          _key,          _type,          _type == "banner" => {            title,            bannerImage{              asset,              alt            },            link,            description          },          _type == "richText" => {            richTextContent[]{              ...,            }          },          _type == "sanityImage" => {            alt,            asset,            "metadata": asset->metadata {              dimensions,            }          }        }      },      _type == "twoColumn" => {        _id,        content[]{          _key,          _type,          _type == "quote" => {            author,            quoteText          },          _type == "sanityImage" => {            alt,            asset,            "metadata": asset->metadata {              dimensions,            }          }        }      }    },    timeToRead}
export type RESOURCE_QUERYResult = {
  _id: string;
  title: string | null;
  publishedAt: string | null;
  slug: string | null;
  category: {
    title: string | null;
  } | null;
  author: {
    _id: string;
    name: string | null;
    image: {
      asset: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      } | null;
    } | null;
  } | null;
  mainImage: {
    alt: string | null;
    name: string | null;
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    } | null;
  } | null;
  socialNetwork: Array<{
    _id: string;
    url: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  }> | null;
  preview: string | null;
  content: Array<
    | {
        _type: 'twoColumn';
        _key: string;
        _id: null;
        content: Array<
          | {
              _key: string;
              _type: 'quote';
              author: string | null;
              quoteText: string | null;
            }
          | {
              _key: string;
              _type: 'sanityImage';
              alt: string | null;
              asset: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              } | null;
              metadata: {
                dimensions: SanityImageDimensions | null;
              } | null;
            }
        > | null;
      }
    | {
        _type: 'oneColumn';
        _key: string;
        content: Array<
          | {
              _key: string;
              _type: 'banner';
              title: string | null;
              bannerImage: {
                asset: {
                  _ref: string;
                  _type: 'reference';
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
                } | null;
                alt: string | null;
              } | null;
              link: Link | null;
              description: Array<{
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?:
                  | 'blockquote'
                  | 'h1'
                  | 'h2'
                  | 'h3'
                  | 'h4'
                  | 'h5'
                  | 'h6'
                  | 'normal';
                listItem?: 'bullet' | 'number';
                markDefs?: Array<{
                  href?: string;
                  _type: 'link';
                  _key: string;
                }>;
                level?: number;
                _type: 'block';
                _key: string;
              }> | null;
            }
          | {
              _key: string;
              _type: 'richText';
              richTextContent: Array<{
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
                listItem?: 'bullet' | 'number';
                markDefs?: Array<{
                  href?: string;
                  _type: 'link';
                  _key: string;
                }>;
                level?: number;
                _type: 'block';
                _key: string;
              }> | null;
            }
          | {
              _key: string;
              _type: 'sanityImage';
              alt: string | null;
              asset: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              } | null;
              metadata: {
                dimensions: SanityImageDimensions | null;
              } | null;
            }
        > | null;
      }
  > | null;
  timeToRead: number | null;
} | null;
// Variable: RESOURCE_META_QUERY
// Query: *[_type == "resource" && slug.current == $slug][0]{    metaData {      title,      description    }  }
export type RESOURCE_META_QUERYResult = {
  metaData: {
    title: string | null;
    description: string | null;
  } | null;
} | null;
// Variable: RESOURCES_PAGE_QUERY
// Query: *[_type == "resources"][0]{  _id,  title,  subtitle,  categories[]->{    _id,    title  },  mainImage{    alt,    name,    asset  },  featured->{    _id,    author->{      name,    },    title,    "slug": slug.current,    preview,    publishedAt,    tag[]->{      _id,      name    },    mainImage{      alt,      name,      asset    },    timeToRead,    content  }}
export type RESOURCES_PAGE_QUERYResult = {
  _id: string;
  title: string | null;
  subtitle: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
  }> | null;
  mainImage: {
    alt: string | null;
    name: string | null;
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    } | null;
  } | null;
  featured: {
    _id: string;
    author: {
      name: string | null;
    } | null;
    title: string | null;
    slug: string | null;
    preview: string | null;
    publishedAt: string | null;
    tag: Array<{
      _id: string;
      name: string | null;
    }> | null;
    mainImage: {
      alt: string | null;
      name: string | null;
      asset: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      } | null;
    } | null;
    timeToRead: number | null;
    content: Array<
      | ({
          _key: string;
        } & OneColumn)
      | ({
          _key: string;
        } & TwoColumn)
    > | null;
  } | null;
} | null;
// Variable: RESOURCES_QUERY
// Query: *[_type == "resource" &&   (!defined($category) || category->title == $category)] | order(publishedAt desc){    _id,    title,    publishedAt,    slug,    category->{      title,    },    author->{      _id,      name,      image    },    "slug": slug.current,    preview,    mainImage{      alt,      name,      asset    },    tag[]->{      _id,      name    },    timeToRead}
export type RESOURCES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  publishedAt: string | null;
  slug: string | null;
  category: {
    title: string | null;
  } | null;
  author: {
    _id: string;
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  } | null;
  preview: string | null;
  mainImage: {
    alt: string | null;
    name: string | null;
    asset: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    } | null;
  } | null;
  tag: Array<{
    _id: string;
    name: string | null;
  }> | null;
  timeToRead: number | null;
}>;
// Variable: OUR_TEAM_QUERY
// Query: *[_type == "about"][0]{    member[] -> {      _id,      title,      name,      image    }  }
export type OUR_TEAM_QUERYResult = {
  member: Array<{
    _id: string;
    title: string | null;
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
  }> | null;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "resource" && \n  slug.current == $slug][0]{\n    _id,\n    title,\n    publishedAt,\n    slug,\n    category->{\n      title,\n    },\n    author->{\n      _id,\n      name,\n      image {\n        asset\n      }\n    },\n    mainImage{\n     alt,\n     name,\n     asset\n    },\n    socialNetwork[] ->{\n      _id,\n      url,\n      image\n    },\n    "slug": slug.current,\n    preview,\n    content[]{\n      _type,\n      _key,\n      _type == "oneColumn" => {\n        content[]{\n          _key,\n          _type,\n          _type == "banner" => {\n            title,\n            bannerImage{\n              asset,\n              alt\n            },\n            link,\n            description\n          },\n          _type == "richText" => {\n            richTextContent[]{\n              ...,\n            }\n          },\n          _type == "sanityImage" => {\n            alt,\n            asset,\n            "metadata": asset->metadata {\n              dimensions,\n            }\n          }\n        }\n      },\n      _type == "twoColumn" => {\n        _id,\n        content[]{\n          _key,\n          _type,\n          _type == "quote" => {\n            author,\n            quoteText\n          },\n          _type == "sanityImage" => {\n            alt,\n            asset,\n            "metadata": asset->metadata {\n              dimensions,\n            }\n          }\n        }\n      }\n    },\n    timeToRead\n}\n': RESOURCE_QUERYResult;
    '\n  *[_type == "resource" && slug.current == $slug][0]{\n    metaData {\n      title,\n      description\n    }\n  }\n': RESOURCE_META_QUERYResult;
    '\n*[_type == "resources"][0]{\n  _id,\n  title,\n  subtitle,\n  categories[]->{\n    _id,\n    title\n  },\n  mainImage{\n    alt,\n    name,\n    asset\n  },\n  featured->{\n    _id,\n    author->{\n      name,\n    },\n    title,\n    "slug": slug.current,\n    preview,\n    publishedAt,\n    tag[]->{\n      _id,\n      name\n    },\n    mainImage{\n      alt,\n      name,\n      asset\n    },\n    timeToRead,\n    content\n  }\n}\n': RESOURCES_PAGE_QUERYResult;
    '*[_type == "resource" && \n  (!defined($category) || category->title == $category)] | order(publishedAt desc){\n    _id,\n    title,\n    publishedAt,\n    slug,\n    category->{\n      title,\n    },\n    author->{\n      _id,\n      name,\n      image\n    },\n    "slug": slug.current,\n    preview,\n    mainImage{\n      alt,\n      name,\n      asset\n    },\n    tag[]->{\n      _id,\n      name\n    },\n    timeToRead\n}': RESOURCES_QUERYResult;
    '*[_type == "about"][0]{\n    member[] -> {\n      _id,\n      title,\n      name,\n      image\n    }\n  }': OUR_TEAM_QUERYResult;
  }
}
